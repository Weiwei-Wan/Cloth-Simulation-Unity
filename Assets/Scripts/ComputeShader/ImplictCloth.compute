// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Init
#pragma kernel UpdateF
#pragma kernel UpdateP
#pragma kernel UpdateRhs
#pragma kernel UpdateRes2
#pragma kernel UpdateD
#pragma kernel UpdateAd
#pragma kernel UpdateRes2Pos

RWStructuredBuffer<float4> pos; //position
RWStructuredBuffer<float4> norm; //normal
RWStructuredBuffer<float3> force; 
RWStructuredBuffer<float3> vel; //velocity
RWStructuredBuffer<float4> pos_pre; //position
RWStructuredBuffer<float> A; 
RWStructuredBuffer<float> df; 
RWStructuredBuffer<float3> res; 
RWStructuredBuffer<float3> rhs;
RWStructuredBuffer<float3> inertia;
RWStructuredBuffer<float3> d;
RWStructuredBuffer<float3> res2;
RWStructuredBuffer<float3> Ad;

uint2 nodeNum;  // row: x  col:y
float ksStretch;
float ksShear;
float ksBend;
float wind;
float dt;

#define size 2
#define springIniLen 0.1
#define mass 1
#define damp 1

static float rho = 0;
static float rho_old = 1;
static float alpha = 0;
static float beta = 0;
static bool IsBreak = false;
static bool sum1 = false;
static bool sum2 = false;

// collision with sphere
uniform float3 sphere;
#define radius 1

static uint2 StretchSpringDir[4] = {{1,0},{0,1},{-1,0},{0,-1}};
static uint2 ShearSpringDir[4] = {{2,0},{0,2},{-2,0},{0,-2}};
static uint2 BendSpringDir[4] = {{1,1},{-1,1},{-1,-1},{1,-1}};
static uint2 NormDir[4] = {{1,0},{0,1},{-1,0},{0,-1},};
static uint  I[9] = {1,0,0,0,1,0,0,0,1};

static bool hasThisPos(uint2 id) {
    return id.x >= 0 && id.x < nodeNum.x && id.y >=0 && id.y < nodeNum.y;
}

static void updateForce(uint2 id) {
    uint index = id.x + id.y * nodeNum.x;
    float xx = index;
    uint nodeAll = nodeNum.x * nodeNum.y;
    float3 position = pos[index].xyz;
    float3 velocity = vel[index];
    float3 normal = norm[index].xyz;
    
    for (uint type = 0; type < 3; type++) {
        for (uint t = 0; t < 4; t++) {
            // stretch
            uint2 next_id = id + StretchSpringDir[t];
            float ks=ksStretch;
            float len = springIniLen;
            // shear
            if (type == 1) {
                next_id = id + ShearSpringDir[t];
                ks=ksShear;
                len = 2*springIniLen;
            }
            // bend
            else if (type == 2) {
                next_id = id + BendSpringDir[t];
                ks=ksBend;
                len = 1.414f*springIniLen;
            }
            uint next_index = next_id.x + next_id.y * nodeNum.x;
            float3 next_position = pos[next_index].xyz;

            if (hasThisPos(next_id)) {
                // Hooke's law
                float3 pos_diff = position - next_position;
                float distance = length(pos_diff);
                float3 pos_dir = pos_diff/distance;
                // calculate spring force
                force[index] -= ks*(distance-len)*pos_dir;
                // for implict Jacobian
                float mat[9] = {pos_dir.x*pos_dir.x, pos_dir.x*pos_dir.y, pos_dir.x*pos_dir.z, 
                                pos_dir.y*pos_dir.x, pos_dir.y*pos_dir.y, pos_dir.y*pos_dir.z, 
                                pos_dir.z*pos_dir.x, pos_dir.z*pos_dir.y, pos_dir.z*pos_dir.z, }; 
                for (uint n=0; n<9; n++) {
                    float hes = ks*(I[n] - (len/distance)*(I[n]-mat[n]));
                    df[index*nodeAll*9+index*9+n] = -hes;
                    df[index*nodeAll*9+next_index*9+n] = hes;

                    //df[next_index*nodeAll*9+next_index*9+n] -= hes;
                    //df[next_index*nodeAll*9+index*9+n] += hes;

                    A[index*nodeAll*9+index*9+n] = I[n]-dt*dt*df[index*nodeAll*9+index*9+n];
                    A[index*nodeAll*9+next_index*9+n] = -dt*dt*df[index*nodeAll*9+next_index*9+n];

                    //A[next_index*nodeAll*9+next_index*9+n] = I[n]-dt*dt*df[next_index*nodeAll*9+next_index*9+n];
                    //A[next_index*nodeAll*9+index*9+n] = -dt*dt*df[next_index*nodeAll*9+index*9+n];
                }
            } 
        }
    }
    //gravity
    force[index] += float3(0,-9.8,0) * mass;
    //wind
    force[index] += 2*dot(normal, float3(0,0,wind)-velocity)*normal;
    //damp
    force[index] += - damp * velocity;
    // pin two up corner
    if (id.y == 0 && (id.x == 0 || id.x == nodeNum.x - 1)) {
        force[index] = 0;
    }
}

static void updateRhs(uint2 id) {
    uint index = id.x + id.y * nodeNum.x;
    uint nodeAll = nodeNum.x * nodeNum.y;
    inertia[index] = mass * (2 * pos[index].xyz - pos_pre[index].xyz);
    res[index] = float3(0,0,0);
    for (uint j = 0; j < nodeAll; j++) {
        res[index].x += df[index*nodeAll*9+j*9+0] * pos[j].x + df[index*nodeAll*9+j*9+1] * pos[j].y + df[index*nodeAll*9+j*9+2] * pos[j].z;
        res[index].y += df[index*nodeAll*9+j*9+3] * pos[j].x + df[index*nodeAll*9+j*9+4] * pos[j].y + df[index*nodeAll*9+j*9+5] * pos[j].z;
        res[index].z += df[index*nodeAll*9+j*9+6] * pos[j].x + df[index*nodeAll*9+j*9+7] * pos[j].y + df[index*nodeAll*9+j*9+8] * pos[j].z;       
    }
    rhs[index] = inertia[index] + dt*dt*force[index] - dt*dt*res[index];
}

static void updateRes2(uint2 id) {
    uint index = id.x + id.y * nodeNum.x;
    uint nodeAll = nodeNum.x * nodeNum.y;
    d[index] = float3(0,0,0);
    Ad[index] = float3(0,0,0);
    res2[index] = float3(0,0,0);
    float3 x = float3(0,0,0);
    for (uint j = 0; j < nodeAll; j++) {
        x.x += A[index*nodeAll*9+j*9+0] * pos[j].x + A[index*nodeAll*9+j*9+1] * pos[j].y + A[index*nodeAll*9+j*9+2] * pos[j].z;
        x.y += A[index*nodeAll*9+j*9+3] * pos[j].x + A[index*nodeAll*9+j*9+4] * pos[j].y + A[index*nodeAll*9+j*9+5] * pos[j].z;
        x.z += A[index*nodeAll*9+j*9+6] * pos[j].x + A[index*nodeAll*9+j*9+7] * pos[j].y + A[index*nodeAll*9+j*9+8] * pos[j].z; 
    }
    res2[index] = rhs[index] - x;
}

// loop
static void updateD(uint2 id) {
    if (IsBreak) {return;}
    uint index = id.x + id.y * nodeNum.x;
    uint nodeAll = nodeNum.x * nodeNum.y;
    if (!sum1) {
        rho = 0;
        for (uint j = 0; j < nodeAll; j++) {
            rho += res2[j].x * res2[j].x + res2[j].y * res2[j].y + res2[j].z * res2[j].z;
        }
        sum1 = true;
    }
    if (rho < 1e-8) {IsBreak=true;}
    d[index] = res2[index] + d[index]*rho/rho_old;
}

static void updateAd(uint2 id) {
    if (IsBreak) {return;}
    uint nodeAll = nodeNum.x * nodeNum.y;
    if (!sum2) {
        alpha = 0;
        for (uint index = 0; index < nodeAll; index++) {
            Ad[index] = float3(0,0,0);
            for (uint j = 0; j < nodeAll; j++) {
                Ad[index].x += A[index*nodeAll*9+j*9+0] * d[j].x + A[index*nodeAll*9+j*9+1] * d[j].y + A[index*nodeAll*9+j*9+2] * d[j].z;
                Ad[index].y += A[index*nodeAll*9+j*9+3] * d[j].x + A[index*nodeAll*9+j*9+4] * d[j].y + A[index*nodeAll*9+j*9+5] * d[j].z;
                Ad[index].z += A[index*nodeAll*9+j*9+6] * d[j].x + A[index*nodeAll*9+j*9+7] * d[j].y + A[index*nodeAll*9+j*9+8] * d[j].z; 
            }
            alpha += d[index].x * Ad[index].x + d[index].y * Ad[index].y + d[index].z * Ad[index].z;
        }
        sum2 = true;
    }
}

static void updateRes2Pos(uint2 id) {
    if (IsBreak) {return;}
    uint index = id.x + id.y * nodeNum.x;
    res2[index] = res2[index] - Ad[index]*rho/alpha;
    pos[index].xyz = pos[index].xyz + d[index]*rho/alpha;
    // pin two up corner
    if (id.y == 0 && (id.x == 0 || id.x == nodeNum.x - 1)) {
        pos[index] = pos_pre[index];
    }
    rho_old = rho;
    rho = 0;
    alpha = 0;
    beta = 0;
}

// collision with sphere
static void checkSphereCollision(uint2 id){
    uint index = id.x + id.y * nodeNum.x;
    float3 position = pos[index].xyz;
    float3 velocity = vel[index];
    float s_distance = distance(position, sphere);
    float safe_radius = radius + 0.02f;
    if (s_distance < safe_radius) {
        float3 s_pos_dir = normalize(position - sphere);
        position = position - (s_distance-safe_radius)*s_pos_dir;
        velocity = velocity - dot(velocity,s_pos_dir)*s_pos_dir;
        pos[index] = float4(position,1);
        vel[index] = velocity;
    }
}

static void updateNorm(uint2 id) {
    uint index = id.x + id.y * nodeNum.x;
    float3 position = pos[index].xyz;
    float3 normal = float3(0,0,0);
    for (uint i = 0; i < 4; i++) {
        uint j = (i + 1) % 4;
        uint2 id1 = id + NormDir[i];
        uint2 id2 = id + NormDir[j];
        if (hasThisPos(id1) && hasThisPos(id2)){
            float3 p1 = pos[id1.x + id1.y * nodeNum.x].xyz;
            float3 p2 = pos[id2.x + id2.y * nodeNum.x].xyz;
            float3 e1 = p1 - position;
            float3 e2 = p2 - position;
            float3 n = normalize(cross(e1,e2));
            normal += n;
            break;
        }
    }
    normal = normalize(normal);
    norm[index] = float4(normal,0);
}

static void updatePos(uint2 id) {
    uint index = id.x + id.y * nodeNum.x;
    uint nodeAll = nodeNum.x * nodeNum.y;
    vel[index] = (pos[index].xyz - pos_pre[index].xyz)/dt;

    updateNorm(id);
    checkSphereCollision(id);
    
    if (IsBreak) {
        IsBreak = false;
        sum1 = false;
        sum2 = false;
        rho_old = 1;
    }
    
    pos_pre[index] = pos[index];
    force[index] = float3(0,0,0);
    for (uint i=0; i<nodeAll; i++) {
        for (uint n=0; n<9; n++) {
            df[index*nodeAll*9+i*9+n] = 0;
            A[index*nodeAll*9+i*9+n] = 0;
        }
    }
}

#define THREAD_X 8
#define THREAD_Y 8

[numthreads(THREAD_X,THREAD_Y,1)]
void Init (uint3 id : SV_DispatchThreadID) {
    uint index = id.x + id.y * nodeNum.x;
    uint nodeAll = nodeNum.x * nodeNum.y;
    pos[index] = float4(id.x * springIniLen,0,id.y * springIniLen,0);
    pos_pre[index] = pos[index];
    vel[index] = float3(0,0,0);
    force[index] = float3(0,0,0);
    norm[index] = float4(0,1,0,0);
    for (uint i=0; i<nodeAll; i++) {
        for (uint n=0; n<9; n++) {
            A[index*nodeAll*9+i*9+n] = 0;
            df[index*nodeAll*9+i*9+n] = 0;
        }
    }
}

[numthreads(THREAD_X,THREAD_Y,1)]
void UpdateF (uint3 id : SV_DispatchThreadID) {
    updateForce(id.xy);
}

[numthreads(THREAD_X,THREAD_Y,1)]
void UpdateRhs (uint3 id : SV_DispatchThreadID) {
    updateRhs(id.xy);
}

[numthreads(THREAD_X,THREAD_Y,1)]
void UpdateRes2 (uint3 id : SV_DispatchThreadID) {
    updateRes2(id.xy);
}

[numthreads(THREAD_X,THREAD_Y,1)]
void UpdateD (uint3 id : SV_DispatchThreadID) {
    updateD(id.xy);
}

[numthreads(THREAD_X,THREAD_Y,1)]
void UpdateAd (uint3 id : SV_DispatchThreadID) {
    updateAd(id.xy);
}

[numthreads(THREAD_X,THREAD_Y,1)]
void UpdateRes2Pos (uint3 id : SV_DispatchThreadID) {
    updateRes2Pos(id.xy);
}

[numthreads(THREAD_X,THREAD_Y,1)]
void UpdateP (uint3 id : SV_DispatchThreadID) {
    updatePos(id.xy);
}